language: cpp

git:
  clone: true
  submodules: true
  depth: 1
  quiet: false

env:
  global:
    - SOURCE_DIR=$TRAVIS_BUILD_DIR
    - BUILD_DIR=$TRAVIS_BUILD_DIR/build
    - RUN_DIR=$TRAVIS_BUILD_DIR/run

matrix:
  include:

    - name: "Ubuntu 18.04 - GCC - UnixODBC - Debug"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - ODBC_DRIVER_MANAGER=unixodbc
        - BUILD_TYPE=Debug
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
      services:
        - docker
      addons:
        apt:
          packages:
            - gcc
            - g++
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "Ubuntu 18.04 - GCC - UnixODBC - RelWithDebInfo"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - ODBC_DRIVER_MANAGER=unixodbc
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
      services:
        - docker
      addons:
        apt:
          packages:
            - gcc
            - g++
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "Ubuntu 18.04 - GCC - UnixODBC - Release"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - ODBC_DRIVER_MANAGER=unixodbc
        - BUILD_TYPE=Release
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
      services:
        - docker
      addons:
        apt:
          packages:
            - gcc
            - g++
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "Ubuntu 18.04 - GCC - iODBC - RelWithDebInfo"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - ODBC_DRIVER_MANAGER=iodbc
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
      services:
        - docker
      addons:
        apt:
          packages:
            - gcc
            - g++
            - iodbc
            - libiodbc2
            - libiodbc2-dev

    - name: "Ubuntu 18.04 - Clang - UnixODBC - RelWithDebInfo"
      os: linux
      dist: bionic
      compiler: clang
      env:
        - CC=clang
        - CXX=clang++
        - ODBC_DRIVER_MANAGER=unixodbc
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
      services:
        - docker
      addons:
        apt:
          packages:
            - clang
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "Ubuntu 18.04 - Clang - iODBC - RelWithDebInfo"
      os: linux
      dist: bionic
      compiler: clang
      env:
        - CC=clang
        - CXX=clang++
        - ODBC_DRIVER_MANAGER=iodbc
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
      services:
        - docker
      addons:
        apt:
          packages:
            - clang
            - iodbc
            - libiodbc2
            - libiodbc2-dev

    - name: "Ubuntu 18.04 - GCC 8 - UnixODBC - RelWithDebInfo"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc-8
        - CXX=g++-8
        - ODBC_DRIVER_MANAGER=unixodbc
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
      services:
        - docker
      addons:
        apt:
          packages:
            - gcc-8
            - g++-8
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "Ubuntu 18.04 - GCC 8 - iODBC - RelWithDebInfo"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc-8
        - CXX=g++-8
        - ODBC_DRIVER_MANAGER=iodbc
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
      services:
        - docker
      addons:
        apt:
          packages:
            - gcc-8
            - g++-8
            - iodbc
            - libiodbc2
            - libiodbc2-dev

    - name: "Ubuntu 18.04 - GCC - UnixODBC - RelWithDebInfo - System third-party libs"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - ODBC_DRIVER_MANAGER=unixodbc
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=yes
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:19.11.8.46"
      services:
        - docker
      addons:
        apt:
          packages:
            - gcc
            - g++
            - openssl
            - libssl-dev
            - libpoco-dev
            - googletest
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "macOS 10.14 - Xcode 11.2 (AppleClang) - iODBC - RelWithDebInfo"
      os: osx
      osx_image: xcode11.2
      compiler: clang
      env:
        - ODBC_DRIVER_MANAGER=iodbc
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
      addons:
        homebrew:
          packages:
            - libiodbc

    - name: "macOS 10.14 - Xcode 11.2 (AppleClang) - UnixODBC - RelWithDebInfo"
      os: osx
      osx_image: xcode11.2
      compiler: clang
      env:
        - ODBC_DRIVER_MANAGER=unixodbc
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
      addons:
        homebrew:
          packages:
            - unixodbc

    - name: "macOS 10.14 - Xcode 11.2 (AppleClang) - iODBC - RelWithDebInfo - System third-party libs"
      os: osx
      osx_image: xcode11.2
      compiler: clang
      env:
        - ODBC_DRIVER_MANAGER=iodbc
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=yes
        - PACKAGING=yes
        - UNIT_TESTING=yes
        - E2E_TESTING=yes
      addons:
        homebrew:
          packages:
            - openssl
            - poco
            - gtest
            - libiodbc

before_install: |-
  if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    sudo apt-get update -q
  elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
    brew update
  fi

install: |-
  if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    # Need binulils because of:
    #   /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/libodbc.a(logOpen.o): unrecognized relocation (0x2a) in section `.text'
    sudo apt-get install -y build-essential binutils cmake perl libdbi-perl libdbd-odbc-perl python python-pyodbc
  elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
    brew install cmake perl python@2
    PERL_MM_USE_DEFAULT=1 cpan -T DBD::ODBC
    # It looks like that older version works with iodbc out of the box on macOS:
    # https://github.com/mkleehammer/pyodbc/commit/aa178bfd25afd6fb90c77d054c1bcf0a6aa54411
    pip install --user pyodbc==3.0.7
  fi

.clickhouse_start: &clickhouse_start |-
  if [ "$E2E_TESTING" == "yes" ]; then
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      docker pull ${CLICKHOUSE_SERVER_IMAGE}
      CLICKHOUSE_SERVER_CONTAINER=$(docker run -d ${CLICKHOUSE_SERVER_IMAGE})
      CLICKHOUSE_SERVER_IP=$(docker inspect -f '{{ .NetworkSettings.IPAddress }}' ${CLICKHOUSE_SERVER_CONTAINER})
      docker ps -a
      docker stats -a --no-stream
    elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
      # In macOS, ClickHouse is installed and running as a separate process on this same system.
      # TODO: use native package manager when available.
      $SOURCE_DIR/test/deploy_and_run_clickhouse_macos.sh
      CLICKHOUSE_SERVER_IP=localhost
    fi
  fi

.odbc_configure: &odbc_configure |-
  if [ "$E2E_TESTING" == "yes" ]; then
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      ODBC_DRIVER_PATH=$BUILD_DIR/driver/libclickhouseodbc.so
      ODBC_DRIVERW_PATH=$BUILD_DIR/driver/libclickhouseodbcw.so
    elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
      ODBC_DRIVER_PATH=$BUILD_DIR/driver/libclickhouseodbc.dylib
      ODBC_DRIVERW_PATH=$BUILD_DIR/driver/libclickhouseodbcw.dylib
    fi

    export ODBCSYSINI=$RUN_DIR
    export ODBCINSTINI=.odbcinst.ini
    export ODBCINI=$ODBCSYSINI/.odbc.ini
    if [ "$ODBC_DRIVER_MANAGER" == "iodbc" ]; then
      # Full path to a custom odbcinst.ini in ODBCINSTINI for iODBC.
      export ODBCINSTINI=$ODBCSYSINI/$ODBCINSTINI
    fi
    
    cat > $ODBCSYSINI/.odbcinst.ini <<-EOF
  [ODBC Drivers]
  clickhouse_driver   = Installed
  clickhouse_driver_w = Installed

  [clickhouse_driver]
  Driver = ${ODBC_DRIVER_PATH}
  Setup  = ${ODBC_DRIVER_PATH}

  [clickhouse_driver_w]
  Driver = ${ODBC_DRIVERW_PATH}
  Setup  = ${ODBC_DRIVERW_PATH}
  EOF

    cat > $ODBCSYSINI/.odbc.ini <<-EOF
  [ODBC]
  Trace     = yes
  TraceFile = ${RUN_DIR}/odbc-driver-manager-trace.log

  [ODBC Data Sources]
  clickhouse_localhost   = clickhouse_driver
  clickhouse_localhost_w = clickhouse_driver_w

  [clickhouse_localhost]
  Driver      = clickhouse_driver
  Description = ClickHouse DSN (ASCII, localhost)
  Url         = http://${CLICKHOUSE_SERVER_IP}
  Timeout     = 30
  Trace       = yes
  TraceFile   = ${RUN_DIR}/clickhouse-odbc-driver-trace.log

  [clickhouse_localhost_w]
  Driver      = clickhouse_driver_w
  Description = ClickHouse DSN (Unicode, localhost)
  Url         = http://${CLICKHOUSE_SERVER_IP}
  Timeout     = 30
  Trace       = yes
  TraceFile   = ${RUN_DIR}/clickhouse-odbc-driver-w-trace.log
  EOF
  fi

.configure: &configure |-
  CMAKE_FLAGS="-DTEST_DSN=clickhouse_localhost -DTEST_DSN_W=clickhouse_localhost_w"
  if [ "$EXTERNAL_THIRD_PARTY" == "yes" ]; then
    CMAKE_FLAGS="-DUNBUNDLED=1 $CMAKE_FLAGS"
  fi
  if [ "$ODBC_DRIVER_MANAGER" == "unixodbc" ]; then
    CMAKE_FLAGS="-DFIND_UNIXODBC_FIRST=1 $CMAKE_FLAGS"
  elif [ "$ODBC_DRIVER_MANAGER" == "iodbc" ]; then
    CMAKE_FLAGS="-DFIND_IODBC_FIRST=1 $CMAKE_FLAGS"
  fi
  cd $BUILD_DIR
  cmake $CMAKE_FLAGS $SOURCE_DIR

.build: &build |-
  cd $BUILD_DIR
  cmake --build . --config $BUILD_TYPE

.pack: &pack |-
  if [ "$PACKAGING" == "yes" ]; then
    cd $BUILD_DIR
    cpack -C $BUILD_TYPE
  fi

.run_unit_tests: &run_unit_tests |-
  if [ "$UNIT_TESTING" == "yes" ]; then
    cd $BUILD_DIR
    ctest -C $BUILD_TYPE -R '.*-ut.*' -VV
  fi

.run_e2e_tests: &run_e2e_tests |-
  if [ "$E2E_TESTING" == "yes" ]; then
    cd $BUILD_DIR
    ctest -C $BUILD_TYPE -E '.*-ut.*' -VV
  fi

before_script: |-
  mkdir -p $BUILD_DIR
  mkdir -p $RUN_DIR

script:
  - *clickhouse_start
  - *odbc_configure
  - *configure
  - *build
  - *pack
  - *run_unit_tests
  - *run_e2e_tests
